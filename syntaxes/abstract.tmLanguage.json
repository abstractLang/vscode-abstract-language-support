{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Abstract",

	"patterns": [
		{ "include": "#main" }
	],

	"repository": {

		"main": {
			"patterns": [
				{ "include": "#comments" },
				{ "include": "#code" }
			]
		},

		"code": {
			"patterns": [
				{ "include": "#keywords" },
				{ "include": "#attributes" },
				{ "include": "#constants" },
				{ "include": "#strings" },
				{ "include": "#calls" },
				{ "include": "#names" }
			]
		},

		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.abstract",
					"match": "\\b(namespace|func|struct|packed|enum|let|const|comptime|inline)\\b"
				},
				{
					"name": "keyword.control.abstract",
					"match": "\\b(import|from|extends|implements|constructor|destructor)\\b"
				},
				{
					"name": "keyword.control.process.abstract",
					"match": "\\b(if|elif|else|while|for|break|return)\\b"
				},
				{
					"name": "keyword.control.trycatch.abstract",
					"match": "\\b(try|catch)\\b"
				},
				{
					"patterns": [
						{
							"name": "support.type.abstract",
							"match": "\\b([ui](8|16|32|64|128|ptr)|byte)\\b"
						},
						{
							"name": "support.type.abstract",
							"match": "\\b(f32|f64|float|double)\\b"
						},
						{
							"name": "support.type.abstract",
							"match": "\\b(string|char|bool|void|type|anytype|noreturn)\\b"
						}
					]
				},
				{
					"name": "keyword.operator.abstract",
					"match": "(\\+|-|\\*|\\/|%|==|!=|>=|<=|=|\\+=|-=|\\*=|\\/=|%=|and|or)"
				}
			]
		},

		"attributes": {
			"name": "support.modifier.abstract",
			"match": "@[a-zA-Z_][a-zA-Z0-9_]*"
		},

		"constants": {
			"patterns": [
				{
					"name": "constant.language.abstract",
					"match": "\\b(null|true|false)\\b"
				},
				{
					"patterns": [
						{
							"name": "constant.numeric.hexadecimal.abstract",
							"match": "\\b(0x[0-9a-fA-F_]+)\\b"
						},
						{
							"name": "constant.numeric.binary.abstract",
							"match": "\\b(0b[01_]+)\\b"
						},
						{
							"name": "constant.numeric.decimal.abstract",
							"match": "\\b(\\d+.\\d+|\\d+)\\b"
						}
					]
				}
			]
		},

		"strings": {
			"name": "string.quoted.double.abstract",
			"begin": "\"",
			"end": "\"",

			"patterns": [
				{
					"name": "string.interpolated.abstract",
					"begin": "\\\\\\{",
					"end": "}",

					"patterns": [
						{
							"name": "constant.language.interpolation.open.abstract",
							"match": "\\\\\\{"
						},

						{ "include": "#code" }
					]
				},
				{
					"name": "constant.character.escape.abstract",
					"match": "\\\\."
				}
			]
		},

		"comments": {
			"patterns": [
				{
					"name": "comment.block.abstract",
					"begin": "###",
					"end": "###"
				},
				{
					"name": "comment.line.abstract",
					"begin": "#",
					"end": "\n"
				}
			]
		},

		"calls": {
			"name": "entity.name.function.abstract",
			"match": "[a-zA-Z_][a-zA-Z0-9_]*(?=\\()"
		},

		"names": {
			"name": "variable.other.abstract",
            "match": "\\w+"
		}

	},

	"scopeName": "source.abs"
}